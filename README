Generates JavaScript and optionally alternative content for SWFObject v2.1:
http://code.google.com/p/swfobject/wiki/documentation
http://code.google.com/p/swfobject/wiki/release_notes

Use the swf_object helper to generate all necessary markup and javascript for
flash player content.

Required attributes for swf_object are:
  :url        # The url of the swf to be embedded
  :id         # The id of the dom node which the swf will replace
  :width      # The width in pixels of the swf to be embedded
  :height     # The height in pixels of the swf to be embedded
  :version    # The minimum flash version necessary to display the provided content

A number of Adobe-specific params are supported.  Supported params are
listed in SWFObjectHelper::OPTIONAL_PARAMS_POSSIBLE_VALUES

Custom parameters can be supplied using the :params attribute, and variables
can be passed directly to the swf itself using the :flashvars attribute.
Attributes supplied via :flashvars are automatically url-encoded.

Alternatively, flashvars can be supplied within :params like so
:params => {
  :flashvars => "username=duncanbeevers&connect=true"
}
Flashvars supplied this way must be manually url-encoded.

If you need to supply javascript as parameter to SWFObject, you can avoid the
JSON escaping using the JSParam object.  For example, say you have specified a timestamp
to be passed along with the flashvars, your embed call may look something
like this:

var channel_id = new Date().getTime();
<%= swf_object(
  :url => 'http://example.com/demo.swf',
  :id => 'dom_id', :width => 100, :height => 100, :version => 9,
  :flashvars => {
    :channel_id => SWFObjectHelper::JSParam.new('channel_id')
  }
) %>

Calling swf_object automatically creates an empty containing div for the generated
swf.

  <%= swf_object(...) %>

Provide a block to provide alternate content for when the flash player is not
available:

  <% swf_object(...) do %>
    <p>Get Flash, fool!</p>
  <% end %>

Like other helpers that take blocks, this will concatenate the generated code to
the ERB output stream directly, so use <% %> instead of <%= %> if a block is given.

Or, pass :alt => true to generate string output including default alternative content:

  <%= swf_object(..., :id => 'alt_content', :alt => true) %>
  # => <div id='alt_content'>This website requires ...</div><script ...

or pass :alt => "some string" to put that in the alternative content:
  <%= swf_object(..., :id => 'alt_content', :alt => "no flash") %>
  # => <div id='alt_content'>no flash</div><script ...

If you already have a containing element in your markup, you can generate just the
javascript necessary to embed the swf by using swf_object_js.
Note that if you use this method, you will need to wrap the js in a <script> block

  <%= javascript_tag(swf_object_js(...)) %>

Originally by Henrik N - http://henrik.nyh.se/ http://pastie.textmate.org/private/nu0hpwxmtcx0toi58j4kha
